// <auto-generated />
using System;
using Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Api.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Api.Data.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("cac43a6e-f7bb-4448-baaf-1add431ccbbf"),
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = new Guid("cbc43a8e-f7bb-4445-baaf-1add431ffbbf"),
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("a0f845d1-2680-459d-981a-d40b176c5ca8"),
                            Name = "Technician",
                            NormalizedName = "TECHNICIAN"
                        },
                        new
                        {
                            Id = new Guid("9beb8da7-4160-4db7-9982-05604a4e51d5"),
                            Name = "Housemaid",
                            NormalizedName = "HOUSEMAID"
                        },
                        new
                        {
                            Id = new Guid("36f579e8-2f52-473f-91f2-550331d81d04"),
                            Name = "InventoryManager",
                            NormalizedName = "INVENTORYMANAGER"
                        });
                });

            modelBuilder.Entity("Api.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d743cd79-de33-4733-b51d-580caa50f40a",
                            Email = "admin@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOBzvzQitS3oeUfs6onaRBwN0W7XKGkp9g7eeqAh2OV1pHsGL8fXUONirpVDLiw80w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "K2SW2BTS4I5GN4WZYXW3ACQYNRVHX4L6",
                            Sex = "male",
                            TwoFactorEnabled = false,
                            UserName = "admin@localhost.com"
                        },
                        new
                        {
                            Id = new Guid("a9aebd65-e077-4d28-bb62-314428739789"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "80af2796-87a3-47ca-8f6d-d6318ae6a7d0",
                            Email = "manager@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "Manager",
                            LastName = "Manager",
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@LOCALHOST.COM",
                            NormalizedUserName = "MANAGER@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOBzvzQitS3oeUfs6onaRBwN0W7XKGkp9g7eeqAh2OV1pHsGL8fXUONirpVDLiw80w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "K2SW2BTS4I5GN4WZYXW3ACQYNRVHX4L6",
                            Sex = "male",
                            TwoFactorEnabled = false,
                            UserName = "manager@localhost.com"
                        },
                        new
                        {
                            Id = new Guid("181eae58-202d-4757-86e2-578df1743d6c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "521abc88-1ef1-4321-a9d7-b4ad2f90c9e1",
                            Email = "inventorymanager@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "InventoryManager",
                            LastName = "InventoryManager",
                            LockoutEnabled = false,
                            NormalizedEmail = "INVENTORYMANAGER@LOCALHOST.COM",
                            NormalizedUserName = "INVENTORYMANAGER@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOBzvzQitS3oeUfs6onaRBwN0W7XKGkp9g7eeqAh2OV1pHsGL8fXUONirpVDLiw80w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "K2SW2BTS4I5GN4WZYXW3ACQYNRVHX4L6",
                            Sex = "male",
                            TwoFactorEnabled = false,
                            UserName = "inventorymanager@localhost.com"
                        },
                        new
                        {
                            Id = new Guid("d525eef7-5569-4b54-8b6d-2f796bc9ba9a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a6212ed6-94cb-4ecf-93f8-8219d0a9927f",
                            Email = "housemaid@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "Housemaid",
                            LastName = "Housemaid",
                            LockoutEnabled = false,
                            NormalizedEmail = "HOUSEMAID@LOCALHOST.COM",
                            NormalizedUserName = "HOUSEMAID@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOBzvzQitS3oeUfs6onaRBwN0W7XKGkp9g7eeqAh2OV1pHsGL8fXUONirpVDLiw80w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "K2SW2BTS4I5GN4WZYXW3ACQYNRVHX4L6",
                            Sex = "female",
                            TwoFactorEnabled = false,
                            UserName = "housemaid@localhost.com"
                        },
                        new
                        {
                            Id = new Guid("217d332c-ef08-4f06-86b3-68df9eb48e73"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f1239b90-0ec4-4b9e-8331-322edc7eaf12",
                            Email = "technician@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "Technician",
                            LastName = "Technician",
                            LockoutEnabled = false,
                            NormalizedEmail = "TECHNICIAN@LOCALHOST.COM",
                            NormalizedUserName = "TECHNICIAN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOBzvzQitS3oeUfs6onaRBwN0W7XKGkp9g7eeqAh2OV1pHsGL8fXUONirpVDLiw80w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "K2SW2BTS4I5GN4WZYXW3ACQYNRVHX4L6",
                            Sex = "male",
                            TwoFactorEnabled = false,
                            UserName = "technician@localhost.com"
                        });
                });

            modelBuilder.Entity("Api.Domain.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Assignments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c8837679-cb17-41a3-93b0-c7d797a61a76"),
                            Name = "Clear room",
                            RoleId = new Guid("9beb8da7-4160-4db7-9982-05604a4e51d5")
                        },
                        new
                        {
                            Id = new Guid("58302ce8-d000-4301-b24b-52cd5ded95a2"),
                            Name = "Replace light bulb",
                            RoleId = new Guid("a0f845d1-2680-459d-981a-d40b176c5ca8")
                        });
                });

            modelBuilder.Entity("Api.Domain.AssignmentToUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssignmentToUserStatusId")
                        .HasColumnType("uuid");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("AssignmentToUserStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("AssignmentsToUsers");
                });

            modelBuilder.Entity("Api.Domain.AssignmentToUserStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AssignmentToUserStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3022c20b-6201-4569-ba95-1a5eb8b7be83"),
                            Name = "Not Accepted"
                        },
                        new
                        {
                            Id = new Guid("05f8bba5-01df-476b-9886-8b18eb95efef"),
                            Name = "In Progress"
                        },
                        new
                        {
                            Id = new Guid("2bfa63c2-77e9-44eb-a36d-7fa181e64cf0"),
                            Name = "Completed"
                        },
                        new
                        {
                            Id = new Guid("c6f0b461-e6ae-42fd-b13b-0e52c67c48e1"),
                            Name = "Approved"
                        },
                        new
                        {
                            Id = new Guid("cf20d3b5-226e-4716-a299-dc25f98740c3"),
                            Name = "Rejected"
                        });
                });

            modelBuilder.Entity("Api.Domain.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ItemCategoryId")
                        .HasColumnType("uuid");

                    b.Property<int>("MinimumStockQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ItemCategoryId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8da704f4-af4d-4e1a-b151-74f042572600"),
                            ItemCategoryId = new Guid("8da704f4-af4d-4e1a-b151-74f042572600"),
                            MinimumStockQuantity = 10,
                            Name = "Bedding set",
                            Quantity = 10
                        },
                        new
                        {
                            Id = new Guid("b702a464-7170-4a7a-b6b7-4ecedda97792"),
                            ItemCategoryId = new Guid("db8c54ca-7da5-4e51-9490-861e44c86079"),
                            MinimumStockQuantity = 30,
                            Name = "Soap",
                            Quantity = 30
                        },
                        new
                        {
                            Id = new Guid("75de4f70-0237-4df5-846f-6e825f946f87"),
                            ItemCategoryId = new Guid("37be3767-b73f-4abd-94db-e47a719e7dd4"),
                            MinimumStockQuantity = 500,
                            Name = "Nail",
                            Quantity = 500
                        },
                        new
                        {
                            Id = new Guid("674c73fc-2a7b-40ba-af56-d6a8a486cb3e"),
                            ItemCategoryId = new Guid("37be3767-b73f-4abd-94db-e47a719e7dd4"),
                            MinimumStockQuantity = 80,
                            Name = "Light bulb",
                            Quantity = 80
                        });
                });

            modelBuilder.Entity("Api.Domain.ItemCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ItemCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8da704f4-af4d-4e1a-b151-74f042572600"),
                            Name = "Bed"
                        },
                        new
                        {
                            Id = new Guid("db8c54ca-7da5-4e51-9490-861e44c86079"),
                            Name = "Bathroom"
                        },
                        new
                        {
                            Id = new Guid("37be3767-b73f-4abd-94db-e47a719e7dd4"),
                            Name = "Repair"
                        });
                });

            modelBuilder.Entity("Api.Domain.ItemHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfAction")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("PerformedAction")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("ItemsHistories");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            RoleId = new Guid("cbc43a8e-f7bb-4445-baaf-1add431ffbbf")
                        },
                        new
                        {
                            UserId = new Guid("a9aebd65-e077-4d28-bb62-314428739789"),
                            RoleId = new Guid("cac43a6e-f7bb-4448-baaf-1add431ccbbf")
                        },
                        new
                        {
                            UserId = new Guid("181eae58-202d-4757-86e2-578df1743d6c"),
                            RoleId = new Guid("36f579e8-2f52-473f-91f2-550331d81d04")
                        },
                        new
                        {
                            UserId = new Guid("d525eef7-5569-4b54-8b6d-2f796bc9ba9a"),
                            RoleId = new Guid("9beb8da7-4160-4db7-9982-05604a4e51d5")
                        },
                        new
                        {
                            UserId = new Guid("217d332c-ef08-4f06-86b3-68df9eb48e73"),
                            RoleId = new Guid("a0f845d1-2680-459d-981a-d40b176c5ca8")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Assignment", b =>
                {
                    b.HasOne("Api.Data.Models.Role", "Role")
                        .WithMany("Assignments")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Api.Domain.AssignmentToUser", b =>
                {
                    b.HasOne("Api.Domain.Assignment", "Assignment")
                        .WithMany("AssignmentsToUsers")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.AssignmentToUserStatus", "AssignmentToUserStatus")
                        .WithMany("AssignmentToUsers")
                        .HasForeignKey("AssignmentToUserStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Data.Models.User", "User")
                        .WithMany("AssignmentsToUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("AssignmentToUserStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Api.Domain.Item", b =>
                {
                    b.HasOne("Api.Domain.ItemCategory", "ItemCategory")
                        .WithMany("Items")
                        .HasForeignKey("ItemCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemCategory");
                });

            modelBuilder.Entity("Api.Domain.ItemHistory", b =>
                {
                    b.HasOne("Api.Domain.Item", "Item")
                        .WithMany("ItemHistories")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Data.Models.User", "User")
                        .WithMany("ItemHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Api.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Api.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Api.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Api.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Api.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Data.Models.Role", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("Api.Data.Models.User", b =>
                {
                    b.Navigation("AssignmentsToUsers");

                    b.Navigation("ItemHistories");
                });

            modelBuilder.Entity("Api.Domain.Assignment", b =>
                {
                    b.Navigation("AssignmentsToUsers");
                });

            modelBuilder.Entity("Api.Domain.AssignmentToUserStatus", b =>
                {
                    b.Navigation("AssignmentToUsers");
                });

            modelBuilder.Entity("Api.Domain.Item", b =>
                {
                    b.Navigation("ItemHistories");
                });

            modelBuilder.Entity("Api.Domain.ItemCategory", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
